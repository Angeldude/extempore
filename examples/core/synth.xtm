;;; synth.xtm -- a simple little synth example

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;;; Code:

(sys:load "libs/core/instruments.xtm")
(sys:load "libs/external/instruments_ext.xtm")
;; (sys:load "libs/core/pc_ivl.xtm")
;; (sys:load "../../digego/code/andrewlib.xtm")

(make-instrument synth1 synth)
(make-instrument synth2 synth)
(make-instrument sampler1 sampler)

;; (bind-val synth1 INSTRUMENT (make_instrument (synth_note #t) (synth_fx)))
;; (define synth1 ($$ synth1))
;; (bind-val synth2 INSTRUMENT (make_instrument (synth_note #f) (synth_fx)))
;; (define synth2 ($$ synth2))
;; (bind-val sampler INSTRUMENT (make_instrument (sampler_note) (sampler_fx)))
;; (define sampler ($$ sampler))
;; (bind-val sampler2 INSTRUMENT (make_instrument (sampler_note) (sampler_fx)))
;; (define sampler2 ($$ sampler2))

(load-sampler sampler1 "/home/andrew/Documents/Samples/accordian")
(load-sampler sampler1 "/home/andrew/Documents/Samples/piano" 1)



;; (bind-val synth3 INSTRUMENT (make_instrument (synth_note_c #t) (synth_fx)))
;; (define synth3 ($$ synth3))

(set_polyphony synth1 20)

(set_gain synth2 10.0)

(define testp
  (lambda (beat dur)
    (active_notes synth4)
    (callback (*metro* (+ beat (* .5 dur))) 'testp (+ beat dur) dur)))

(testp (*metro* 'get-beat 4) 1)

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (cond ((< chan 2)
           (+ 0.0
              ;; (* 0.1 (random))
              ;; (* 1.0 (synth2 in time chan dat))
              (* 1.0 (synth2 in time chan dat))
              ;; (* 1.0 (synth3 in time chan dat))
              ;; (* 1.0 (sampler1 in time chan dat))
              ;; (* 1.0 (fmsynth in time chan dat))
              ;; (* 1.0 (synth3 in time chan dat))
              0.0))
          (else 0.0))))


(dsp:set! dsp)

(synth_preset_brownpad synth1)
(synth_preset_brownpad synth2)
(synth_preset_brownpad synth3)
(synth_preset_brownpad synth4)

(play-note (now) synth4 60 80 100000)
(play-note (now) synth4 67 80 100000)

(set_gain sampler1 5.0)

(set_filter_res synth1 0.1)
;; initialize
(synth_preset_pluckbass synth2)
;; (synth_preset_pluckbass synth3)
(synth_preset_brownpad synth3)

(synth_reset sampler1)

(set_amp_env synth3 10.0 10.0 0.5 50.0)

(set_reverb_mix sampler1 0.5)
(set_reverb_size sampler1 0.95)
(set_pan_pos sampler1 0.5)
(set_pan_pos synth1 1.0)
(set_gain sampler2 5.0)

(set_filter_res synth1 0.0)
(set_amp_env synth1 20.0 50.0 0.5 1000.0)
(set_filter_frq
(set_filter_env synth3 0.0 0.0 0.0 0.0)
(set_filter_env_amt synth1 0.0)
(set_filter_frq synth1 5000.0)

(set_amp_env synth1 25.0 35.0 0.3 400.0)
(set_filter_env synth1 15.0 35.0 1.0 400.0)


(set_polyphony synth2 1)
(set_portamento synth2 100.0)

;; first let's play with synth
(define l1)
  (let ((kk 0))    
    (lambda (beat dur cell)
      ;; (println (active_notes synth2))
      ;; (onbeat? 1 (random 2 9)
      ;;          (play sampler2 (pc:q (random 24 110) (pc:scale 0 'aeolian))
      ;;                (random 80 130) 8 1))
      ;; (play sampler1 (+ -48 (car cell)) 120 (* dur 2.0) 0)
      ;; (play fmsynth (+ 3 (car cell)) 80 (* dur 1.0))
      (play synth2 (+ 0 (car cell)) 110 (* dur 1.1))
      (callback (*metro* (+ beat (* dur 0.95))) 'l1
                (+ beat dur)
                1
                (rotate cell -1)))))

(l1 (*metro* 'get-beat 4) 1/4 '(60 63 62 67 72 65 84 77 65 67))

(define root 0)

(define l2)
  (lambda (beat dur)
    (set! root (modulo (random '(0 2 5 7)) 12))
    (map (lambda (p)
           (play synth1 (+ 0 p) 100 (* 0.8 dur) 0.1 1.0))
         (pc:make-chord 55 75 4 (pc:chord root '-7)))
    (callback (*metro* (+ beat (* .95 dur))) 'l2 (+ beat dur)
              dur)))

(l2 (*metro* 'get-beat 4) 8)
