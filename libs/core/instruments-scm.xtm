;;; instruments-scm.xtm -- scheme code for libs/core/instruments.xtm library

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;

;;; Code:

(sys:load "libs/core/pc_ivl.xtm")

(define-macro (make-instrument defname synthname . args)
  (let* ((note (append (string->sexpr (string-append "(" (symbol->string synthname) "_note)")) args))
         (fx (string->sexpr (string-append "(" (symbol->string synthname) "_fx)"))))
    `(begin
       (eval (bind-val ,defname INSTRUMENT (make_instrument ,note ,fx))
             (interaction-environment))
       (eval (define ,defname (call-as-xtlang-leaky ,defname))
             (interaction-environment))
       (print-with-colors 'default 'default #f (print 'New 'instrument 'bound 'as ""))
       (print-with-colors 'green 'default #t (print ',defname ""))
       (print-with-colors 'default 'default #f (println 'in 'both 'scheme 'and 'xtlang))
       #t)))

(define play-note
  (lambda (time inst pitch vol dur . args)
    (let* ((nargs (length args))
           (duration dur)
           (dargs (sys:make-cptr (* (if (audio_64bit) 8 4) nargs))) ;; doubles
           (native (if (closure? inst)
                       (llvm:get-native-closure (symbol->string (apply inst (list 'xtlang))))
                       (if (symbol? inst)
                           (llvm:get-native-closure (eval (string->symbol (string-append (symbol->string inst) "_xtlang_name"))))
                           (if (cptr? inst)
                               inst
                               #f)))))
      (if (= (audio_64bit) 1)
          (dotimes (i nargs) (cptr:set-double dargs (* i 8) (eval (list-ref args i))))
          (dotimes (i nargs) (cptr:set-float dargs (* i 4) (eval (list-ref args i)))))
      (if (cptr? native)
          (xtm_play_note (real->integer time)
                      native
                      (midi2frq (* 1.0 pitch))
                      (/ (exp (/ vol 26.222)) 127.0)
                      (real->integer duration)
                      nargs
                      dargs)
          (print-error 'No 'inst 'named (symbol->string inst))))))


(define start-note
  (lambda (time inst pitch vol . args)
    (apply play-note time inst pitch vol 10000000.0 args)))

(define stop-note
  (lambda (time note)
    (callback time 'xtm_stop_note note)))

(define close-note-gate
  (lambda (time note)
    (callback time 'xtm_gate_off note)))

;; the play macro
(macro (play args)
       (if (symbol? (cadr args))
           `(play-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))
                       ,@(cdr (cddddr args)))
           `(play-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
                       (*metro* 'dur ,(car (cdr (cddddr args))))
                       ,@(cddr (cddddr args)))))


(define-macro (playob o b . args)
  `(if (= 0 (modulo (+ ,o beat) ,b))
       (play ,@args)
       #f))

(define-macro (playobs l b . args)
  `(if (member (modulo beat ,b) ,l)
       (play ,@args)
       #f))


(bind-macro
  "xtlang play macro

for use with native beat shceduler"
  (play . args)
  (let ((ns 0)
        (instargs '()))
    (if (symbol? (car args))
        (begin (set! ns (- (length args) 5))
               (set! instargs (map (lambda (a)
                                     (list 'convert (list '* '1.0:double a)))
                                   (cdr (cddddr args))))
               `(let ((dat:SAMPLE* ,(if (= ns 0) 'null `(alloc ,ns))))
                  ,(if (> ns 0) `(pfill! dat ,@instargs) 1)
                  (xtm_play 0.0
                            ,(car args)
                            ,(cadr args)
                            (convert ,(caddr args))
                            (convert ,(cadddr args))
                            (convert (* 1.0:double (* 1/1 ,(car (cddddr args)))))
                            ,ns dat)))
        (begin (set! ns (- (length args) 6))
               (set! instargs (map (lambda (a)
                                     (list 'convert (list '* '1.0:double a)))
                                   (cddr (cddddr args))))
               `(let ((dat:SAMPLE* ,(if (= ns 0) 'null `(alloc ,ns))))
                  ,(if (> ns 0) `(pfill! dat ,@instargs) 1)
                  (xtm_play ,(car args)
                            ,(cadr args)
                            ,(caddr args)
                            (convert ,(cadddr args))
                            (convert ,(car (cddddr args)))
                            (convert (* 1.0:double (* 1/1 ,(cadr (cddddr args)))))
                            ,ns dat))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; additional compositional tools
;;

(define scale (pc:scale 0 'aeolian))
(define root 0)
(define key 0)
(define chord '(0 3 7))

(define *scale* (pc:scale 0 'aeolian))
(define *root* 0)
(define *key* 0)
(define *chord* '(0 3 7))

;; cosr with pc
(define-macro (qcosr pc . args)
  `(pc:quantize (cosr ,@args) ,pc))

;; sinr with pc
(define-macro (qsinr pc . args)
  `(pc:quantize (sinr ,@args) ,pc))

;; tanr with pc
(define-macro (qtanr pc . args)
  `(pc:quantize (tanr ,@args) ,pc))

;; rampr with pc
(define-macro (qrampr pc . args)
  `(pc:quantize (rampr ,@args) ,pc))

;; recr with pc
(define-macro (qrecr pc . args)
  `(pc:quantize (rectr ,@args) ,pc))

;; trir with pc
(define-macro (qtrir pc . args)
  `(pc:quantize (trir ,@args) ,pc))

(define-macro (onbeat? b of t . f)
  (if (null? f)
      `(if (= (modulo beat ,of) (- ,b 1))
           ,t)
      `(if (= (modulo beat ,of) (- ,b 1))
           ,t ,(car f))))


(define-macro (choose prob a . args)
  (if (null? args)
      `(if (< (random) ,prob)
           ,a)
      `(if (< (random) ,prob)
           ,a ,(car args))))


;; base drums      20-29 - bd
;; snare drums     30-39 - sd
;; hats closed     40-44 - hc
;; hats open       45-49 - ho
;; crash cymbols   50-54 - cc
;; ride cymbols    55-59 - rc
;; high toms       60-64 - ht
;; mid toms        65-70 - m5
;; low toms        70-74 - lt
;; rim shots       75-79 - rs
;; cow bell        80-84 - cb
;; clap            85-89 - cp
;; maracca         90-93 - ma


;; base drums 20-29
(define bd0 20)
(define bd1 21)
(define bd2 22)
(define bd3 23)
(define bd4 24)
(define bd5 25)
(define bd6 26)
(define bd7 27)
(define bd8 28)
(define bd9 29)
;; snare drums 30-39
(define sd0 30)
(define sd1 31)
(define sd2 32)
(define sd3 33)
(define sd4 34)
(define sd5 35)
(define sd6 36)
(define sd7 37)
(define sd8 38)
(define sd9 39)
;; hats closed 40-44
(define hc0 40)
(define hc1 41)
(define hc2 42)
(define hc3 43)
(define hc4 44)
;; hats open 45-49
(define ho0 45)
(define ho1 46)
(define ho2 47)
(define ho3 48)
(define ho4 49)
;; crash cymbols 50-54 
(define cc0 50)
(define cc1 51)
(define cc2 52)
(define cc3 53)
(define cc4 54)
;; ride cymbols 55-59
(define rc0 55)
(define rc1 56)
(define rc2 57)
(define rc3 58)
(define rc4 59)
;; high toms 60-64
(define ht0 60)
(define ht1 61)
(define ht2 62)
(define ht3 63)
(define ht4 64)
;; mid toms 65-69
(define mt0 65)
(define mt1 66)
(define mt2 67)
(define mt3 68)
(define mt4 69)
;; low toms 70-74
(define lt0 70)
(define lt1 71)
(define lt2 72)
(define lt3 73)
(define lt4 74)
;; rim shots 75-79
(define rs0 75)
(define rs1 76)
(define rs2 77)
(define rs3 78)
(define rs4 79)
;; cow bell 80-84
(define cb0 80)
(define cb1 81)
(define cb2 82)
(define cb3 83)
(define cb4 84)
;; clap 85-89
(define cp0 85)
(define cp1 86)
(define cp2 87)
(define cp3 88)
(define cp4 89)
;; maracca 90-92
(define ma0 90)
(define ma1 91)
(define ma2 92)
;; tambourine 93-95
(define tb0 93)
(define tb1 94)
(define tb2 95)



(define __ -1) ;; rest

(define c0 (- 60 48))
(define c#0 (- 61 48))
(define cb0 (- 61 48))
(define d0 (- 62 48))
(define d#0 (- 63 48))
(define eb0 (- 63 48))
(define e0 (- 64 48))
(define f0 (- 65 48))
(define f#0 (- 66 48))
(define gb0 (- 66 48))
(define g0 (- 67 48))
(define g#0 (- 68 48))
(define ab0 (- 68 48))
(define a0 (- 69 48))
(define a#0 (- 70 48))
(define bb0 (- 70 48))
(define b0 (- 71 48))
(define cb0 (- 71 48))

(define c1 (- 60 36))
(define c#1 (- 61 36))
(define cb1 (- 61 36))
(define d1 (- 62 36))
(define d#1 (- 63 36))
(define eb1 (- 63 36))
(define e1 (- 64 36))
(define f1 (- 65 36))
(define f#1 (- 66 36))
(define gb1 (- 66 36))
(define g1 (- 67 36))
(define g#1 (- 68 36))
(define ab1 (- 68 36))
(define a1 (- 69 36))
(define a#1 (- 70 36))
(define bb1 (- 70 36))
(define b1 (- 71 36))
(define cb1 (- 71 36))

(define c2 (- 60 24))
(define c#2 (- 61 24))
(define cb2 (- 61 24))
(define d2 (- 62 24))
(define d#2 (- 63 24))
(define eb2 (- 63 24))
(define e2 (- 64 24))
(define f2 (- 65 24))
(define f#2 (- 66 24))
(define gb2 (- 66 24))
(define g2 (- 67 24))
(define g#2 (- 68 24))
(define ab2 (- 68 24))
(define a2 (- 69 24))
(define a#2 (- 70 24))
(define bb2 (- 70 24))
(define b2 (- 71 24))
(define cb2 (- 71 24))

(define c3 (- 60 12))
(define c#3 (- 61 12))
(define cb3 (- 61 12))
(define d3 (- 62 12))
(define d#3 (- 63 12))
(define eb3 (- 63 12))
(define e3 (- 64 12))
(define f3 (- 65 12))
(define f#3 (- 66 12))
(define gb3 (- 66 12))
(define g3 (- 67 12))
(define g#3 (- 68 12))
(define ab3 (- 68 12))
(define a3 (- 69 12))
(define a#3 (- 70 12))
(define bb3 (- 70 12))
(define b3 (- 71 12))
(define cb3 (- 71 12))

(define c4 60)
(define c#4 61)
(define cb4 61)
(define d4 62)
(define d#4 63)
(define eb4 63)
(define e4 64)
(define f4 65)
(define f#4 66)
(define gb4 66)
(define g4 67)
(define g#4 68)
(define ab4 68)
(define a4 69)
(define a#4 70)
(define bb4 70)
(define b4 71)
(define cb4 71)

(define c5 (+ 60 12))
(define c#5 (+ 61 12))
(define cb5 (+ 61 12))
(define d5 (+ 62 12))
(define d#5 (+ 63 12))
(define eb5 (+ 63 12))
(define e5 (+ 64 12))
(define f5 (+ 65 12))
(define f#5 (+ 66 12))
(define gb5 (+ 66 12))
(define g5 (+ 67 12))
(define g#5 (+ 68 12))
(define ab5 (+ 68 12))
(define a5 (+ 69 12))
(define a#5 (+ 70 12))
(define bb5 (+ 70 12))
(define b5 (+ 71 12))
(define cb5 (+ 71 12))

(define c6 (+ 60 24))
(define c#6 (+ 61 24))
(define cb6 (+ 61 24))
(define d6 (+ 62 24))
(define d#6 (+ 63 24))
(define eb6 (+ 63 24))
(define e6 (+ 64 24))
(define f6 (+ 65 24))
(define f#6 (+ 66 24))
(define gb6 (+ 66 24))
(define g6 (+ 67 24))
(define g#6 (+ 68 24))
(define ab6 (+ 68 24))
(define a6 (+ 69 24))
(define a#6 (+ 70 24))
(define bb6 (+ 70 24))
(define b6 (+ 71 24))
(define cb6 (+ 71 24))

(define c7 (+ 60 36))
(define c#7 (+ 61 36))
(define cb7 (+ 61 36))
(define d7 (+ 62 36))
(define d#7 (+ 63 36))
(define eb7 (+ 63 36))
(define e7 (+ 64 36))
(define f7 (+ 65 36))
(define f#7 (+ 66 36))
(define gb7 (+ 66 36))
(define g7 (+ 67 36))
(define g#7 (+ 68 36))
(define ab7 (+ 68 36))
(define a7 (+ 69 36))
(define a#7 (+ 70 36))
(define bb7 (+ 70 36))
(define b7 (+ 71 36))
(define cb7 (+ 71 36))

(define c8 (+ 60 48))
(define c#8 (+ 61 48))
(define cb8 (+ 61 48))
(define d8 (+ 62 48))
(define d#8 (+ 63 48))
(define eb8 (+ 63 48))
(define e8 (+ 64 48))
(define f8 (+ 65 48))
(define f#8 (+ 66 48))
(define gb8 (+ 66 48))
(define g8 (+ 67 48))
(define g#8 (+ 68 48))
(define ab8 (+ 68 48))
(define a8 (+ 69 48))
(define a#8 (+ 70 48))
(define bb8 (+ 70 48))
(define b8 (+ 71 48))
(define cb8 (+ 71 48))

(define-macro (repeat num e)
  (let ((l (make-list (eval e) (eval num))))
    (cons 'list l)))

(define playp_play_list
  (let ((lst_idx (range 0 1000)))
    (lambda (beat dur pclas inst vols durs lst mod_diff step offset poffset args)
      (let ((duration 0) (volume 0)
            (phase 0))
        (for-each (lambda (x idx t)
                    (if (symbol? x) (set! x (eval x)))
                    (if (list? durs)
                        (if (and (symbol? (car durs))
                                 (defined? (car durs))
                                 (or (closure? (eval (car durs)))
                                     (procedure? (eval (car durs)))
                                     (macro? (eval (car durs)))))                 
                            (set! duration durs)                                                    
                            (if (= (length durs) (length lst))
                                (set! duration (list-ref durs idx))
                                (set! duration step)))
                        (set! duration durs))
                    (if (list? vols)
                        (if (and (symbol? (car vols))
                                 (defined? (car vols))
                                 (or (closure? (eval (car vols)))
                                     (procedure? (eval (car vols)))
                                     (macro? (eval (car vols)))))             
                            (set! volume vols)                      
                            (if (= (length vols) (length lst))
                                (set! volume (list-ref vols idx))
                                (set! volume 80)))
                        (set! volume vols))
                    (if (list? x)
                        (playp_play_list beat dur pclas inst volume
                                         duration x mod_diff (/ step (length lst)) (+ t offset) poffset args)
                        (if (> x 0)
                            (begin
                              (set! phase (+ mod_diff t offset))
                              (eval
                               `(play ,phase ;(+ mod_diff t offset)
                                      ,inst
                                      ,(pc:quantize (+ x poffset) pclas)
                                      ,volume
                                      ,duration
                                      ,@args))))))
                  lst
                  lst_idx
                  (range 0 step (/ step (length lst))))))))


;; (define playp_f
;;   (let ((offsetlist '(cosr sinr trir recr rampr qcosr qsinr qtrir qrecr qrampr)))
;;     (lambda (beat dur . args)
;;       (let ((pclas '(0 1 2 3 4 5 6 7 8 9 10 11))
;;             (offset 0)
;;             (poffset 0)
;;             (data '())
;;             (inst '())
;;             (vols '())
;;             (durs '())
;;             (datal 0)
;;             (cycle 0)
;;             (step 0))
;;         (if (and (list? (car args)) (> (length args) 5))
;;             (begin (set! pclas (car args)) (set! args (cdr args))))
;;         (if (not (or (list? (car args))
;;                      (string? (car args))))
;;             (begin (set! offset (car args)) (set! args (cdr args))))
;;         (if (not (or (list? (car args))
;;                      (string? (car args))))
;;             (begin (set! poffset (car args)) (set! args (cdr args))))
;;         (set! data (car args))
;;         (if (string? data) (set! data (map (lambda (x) (char->integer x)) (string->list data))))
;;         (set! args (cdr args))
;;         (set! datal (length data))
;;         (set! cycle (car args))
;;         (set! args (cdr args))
;;         (set! inst (car args))
;;         (set! args (cdr args))
;;         (set! vols (car args))
;;         (set! args (cdr args))
;;         (set! durs (car args))
;;         (set! args (cdr args))
;;         (set! step (/ cycle datal))
;;         (let ((local_beat (modulo beat cycle))
;;               (mod_diff 0)            
;;               (volume vols)
;;               (phase 0.0)
;;               (duration durs)
;;               (pitch 0))
;;           (dotimes (i (* 2 datal))
;;             (set! mod_diff (- (* i step) local_beat))
;;             (set! pitch (list-ref data (modulo i datal)))
;;             (if (symbol? pitch) (set! pitch (eval pitch)))
;;             (if (list? durs)
;;                 (if (member (car durs) offsetlist)
;;                     (set! duration durs)
;;                     (if (= (length durs) datal)
;;                         (set! duration (list-ref durs (modulo i datal)))                        
;;                         (set! duration step))))
;;             (if (list? vols)
;;                 (if (member (car vols) offsetlist)
;;                     (set! volume vols)                
;;                     (if (= (length vols) datal)
;;                         (set! volume (list-ref vols (modulo i datal)))
;;                         (set! volume 80))))
;;             (if (list? pitch)
;;                 (begin
;;                   (if (and (>= mod_diff 0)
;;                            (< mod_diff dur)
;;                            (not (null? pitch)))
;;                       (playp_play_list beat dur pclas inst volume duration pitch mod_diff step offset poffset args)))
;;                 (begin
;;                   (set! phase (+ mod_diff offset))
;;                   (if (and (>= mod_diff 0)
;;                            (< mod_diff dur)
;;                            (> pitch 0))
;;                       (eval `(play ,phase ;(+ mod_diff offset)
;;                                    ,inst
;;                                    ,(pc:quantize (+ pitch poffset) pclas)
;;                                    ,volume
;;                                    ,duration
;;                                    ,@args))
;;                       (begin #f))))))))))

(define playp_f
  (lambda (beat dur . args)
    (let ((pclas '(0 1 2 3 4 5 6 7 8 9 10 11))
          (offset 0)
          (poffset 0)
          (inst '())
          (data '())            
          (vols '())
          (durs '())
          (datal 0)
          (cycle 0)
          (step 0))
      ;; check for quantizer list
      (if (list? (car args))
          (begin (set! pclas (car args))
                 (set! args (cdr args))))
      ;; now cycle        
      (if (closure? (car args))
          (set! cycle dur)
          (begin
            (set! cycle (car args))
            (set! args (cdr args))))
      ;; if no instrument must be an offset
      (if (not (closure? (car args)))
          (begin (set! offset (car args))
                 (set! args (cdr args))))
      ;; now instrument (which should be a closure!)
      (set! inst (car args))
      (set! args (cdr args))
      ;; if not pitch list must be offset
      (if (not (list? (car args)))
          (begin (set! poffset (car args))
                 (set! args (cdr args))))
      ;; now must be pitch list
      (set! data (car args))
      (set! args (cdr args))
      (set! datal (length data))
      (set! vols (car args))
      (set! args (cdr args))
      (set! durs (car args))
      (set! args (cdr args))
      (set! step (/ cycle datal))
      (let ((local_beat (modulo beat cycle))
            (mod_diff 0)            
            (volume vols)
            (phase 0.0)
            (duration durs)
            (pitch 0))
        (dotimes (i (* 2 datal))
          (set! mod_diff (- (* i step) local_beat))
          (set! pitch (list-ref data (modulo i datal)))
          (if (symbol? pitch) (set! pitch (eval pitch)))
          (if (list? durs)
              (if (and (symbol? (car durs))
                       (defined? (car durs))
                       (or (closure? (eval (car durs)))
                           (procedure? (eval (car durs)))
                           (macro? (eval (car durs)))))
                  (set! duration durs)
                  (if (= (length durs) datal)
                      (set! duration (list-ref durs (modulo i datal)))                        
                      (set! duration step))))
          (if (list? vols) 
              (if (and (symbol? (car vols))        
                       (defined? (car vols))
                       (or (closure? (eval (car vols)))
                           (procedure? (eval (car vols)))
                           (macro? (eval (car vols)))))
                  (set! volume vols)                
                  (if (= (length vols) datal)
                      (set! volume (list-ref vols (modulo i datal)))
                      (set! volume 80))))
          (if (list? pitch)
              (begin
                (if (and (>= mod_diff 0)
                         (< mod_diff dur)
                         (not (null? pitch)))
                    (playp_play_list beat dur pclas inst volume duration pitch mod_diff step offset poffset args)))
              (begin
                (set! phase (+ mod_diff offset))
                (if (and (>= mod_diff 0)
                         (< mod_diff dur)
                         (> pitch 0))
                    (eval `(play ,phase ;(+ mod_diff offset)
                                 ,inst
                                 ,(pc:quantize (+ pitch poffset) pclas)
                                 ,volume
                                 ,duration
                                 ,@args))
                    (begin #f)))))))))


(define-macro (playp . args)
  `(playp_f beat dur ,@args))


;; type is '- or '^
(define fixed-chord
  (lambda (fixed num key type degree . args)
    (set! *key* key)
    (if (equal? type '-)
        (set! *scale* (pc:scale *key* 'aeolian))
        (set! *scale* (pc:scale *key* 'ionian)))
    (set! *chord* (pc:diatonic *key* type degree))
    (set! *root* (car *chord*))
    (let ((crd (pc:make-chord-fixed fixed num *chord*)))
      (if (null? args)
          crd
          (if (list? (car args))
              (make-list-with-indexes crd (car args))
              crd)))))
    

;; r = root
;; q = maj or minor
;; c = chord
;; where c can be symbol 'i7 or list '(0 3 7)
(define set-chord
  (lambda (r q c)
    (set! root r)    
    (set! chord (if (symbol? c) (pc:diatonic root q c) c))
    (set! scale (pc:scale-from-chord root chord))))



(if (not (impc:aot:currently-compiling?))
    (begin
      ;; (eval '(bind-val Metro Metronome*)
      ;;       (interaction-environment))
      ;; (eval
      ;;  '(bind-func metro_init
      ;;     (lambda (bpm:double offset:i64 n:i64 d:i64)
      ;;       (if (not (null? Metro)) (hfree Metro))
      ;;       (set! Metro (hcopy (MakeMetro_4 bpm offset n d)))
      ;;       void))
      ;;  (interaction-environment))
      ;; (metro_init 120. 0 0 1)
      (sys:load "libs/core/pc_ivl.xtm")))


